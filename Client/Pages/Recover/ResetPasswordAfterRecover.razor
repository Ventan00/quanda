@page "/recover/password/reset"

@using Quanda.Client.Components
@using Quanda.Client.Extensions
@using Quanda.Shared.DTOs.Requests
@inject IUsersRepository _usersRepository
@inject NavigationManager _navManager;

@if (_isQueryStringValid == false)
{
    <label class="d-block text-danger">Something is wrong. Please try to recover your password again.</label>
    return;
}

<label class="d-block text-muted">Please fill in fields bellow with the data you provided during registration </label>
<PasswordResetFormComponent HandleValidSubmit="@HandleValidSubmit" IsPending="@_isPending" IdUser="@_idUser" UrlEncodedRecoveryJwt="@_urlEncodedRecoveryJwt" />

@if (_isPasswordSet == true)
{
    <label class="d-block text-success">Your password has been changed</label>
}
else if (_isPasswordSet == false)
{
    <label class="d-block text-danger">Something went wrong. Please try again later.</label>
}

@code {
    private bool? _isQueryStringValid;

    private int _idUser;

    private string _urlEncodedRecoveryJwt;

    private bool? _isPasswordSet;

    private bool _isPending;

    protected override void OnInitialized()
    {
        var uuidFromQuery = _navManager.ExtractQueryStringByKey<int?>("uuid");
        var recoveryTokenFromQuery = _navManager.ExtractQueryStringByKey<string>("recovery_token");

        if (uuidFromQuery is null || string.IsNullOrEmpty(recoveryTokenFromQuery))
        {
            _isQueryStringValid = false;
            return;
        }

        _idUser = (int)uuidFromQuery;
        _urlEncodedRecoveryJwt = recoveryTokenFromQuery;
    }


    private async Task HandleValidSubmit(PasswordResetDTO passwordResetDto)
    {
        _isPending = true;
        _isPasswordSet = await _usersRepository.ResetPasswordAsync(passwordResetDto);
        if (_isPasswordSet == true)
        {
            _navManager.NavigateTo("/login");
        }

        _isPending = false;
    }
}
