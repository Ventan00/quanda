@page "/recover/password/reset"
@using Quanda.Client.Extensions
@using System.Net
@inject NavigationManager _navManager
@inject IToastService _toastService
@inject IUsersRepository _usersRepository

<TopSemicircleComponent/>
<RecoveryContainerComponent Title="Password reset" Description="To reset your password, please enter your new password bellow.">
    <GenericFormComponent Model="@_passwordResetDto" @ref="_form" OnValidSubmit="@ResetPasswordAsync" IsAutoCompleteOn="false" RequireCaptcha="true">
        <FormInputComponent Type="text" @bind-Value="@_passwordResetDto.RawPassword" Placeholder="New password"/>
        <div class="mb-2 w-100">
            <FormSubmitComponent IsPending="@_isPending" SubmitText="Recover password" PendingSubmitText="Processing..."/>
        </div>
    </GenericFormComponent>
</RecoveryContainerComponent>

@code {

    /// <summary>
    ///     Model formularza
    /// </summary>
    private PasswordResetDTO _passwordResetDto;

    /// <summary>
    ///     Zmienna mowiąca o tym, czy formularz jest w trakcie przetwarzania
    /// </summary>
    private bool _isPending;

    /// <summary>
    ///     Referencja do komponentu formularza
    /// </summary>
    private GenericFormComponent<PasswordResetDTO> _form;

    /// <summary>
    ///     Metoda wywoływana przy 1 renderowaniu komponentu
    /// </summary>
    protected override void OnInitialized()
    {
        VerifyQueryParams();
    }

    /// <summary>
    ///     Metoda sprawdzajaca poprawnosc query parametrów z adresu URL
    /// </summary>
    private void VerifyQueryParams()
    {
        var uuidFromQuery = _navManager.ExtractQueryStringByKey<int?>("uuid");
        var recoveryTokenFromQuery = _navManager.ExtractQueryStringByKey<string>("recovery_token");

        if (uuidFromQuery is null || string.IsNullOrEmpty(recoveryTokenFromQuery))
        {
            _navManager.NavigateTo("/recover/confirmation-email");
            _toastService.ShowError("Password reset link is invalid. Please try recovering your password again.");
            return;
        }

        _passwordResetDto = new PasswordResetDTO
        {
            IdUser = (int) uuidFromQuery,
            UrlEncodedRecoveryJwt = recoveryTokenFromQuery
        };
    }

    /// <summary>
    ///     Metoda wysyłająca oraz obsługująca rządanie ustawienia nowego hasła - wywoływana przy potwierdzeniu prawidłowo
    ///     wypełnionego formularza
    /// </summary>
    /// <returns></returns>
    private async Task ResetPasswordAsync()
    {
        _isPending = true;
        _passwordResetDto.CaptchaResponseToken = await _form.CaptchaComponent.GetCaptchaResponseAsync();

        var responseStatusCode = await _usersRepository.ResetPasswordAsync(_passwordResetDto);
        switch (responseStatusCode)
        {
            case HttpStatusCode.NoContent:
                _toastService.ShowSuccess("Your password has been changed.");
                _navManager.NavigateTo("/login");
                return;
            case HttpStatusCode.Unauthorized:
                _toastService.ShowError("reCaptcha must be completed.");
                break;
            case HttpStatusCode.Forbidden:
                _toastService.ShowError("Something is wrong. Please recover your password again.");
                _navManager.NavigateTo("/recover/password");
                return;
        }

        await _form.CaptchaComponent.ResetCaptchaAsync();
        _isPending = false;
    }

}