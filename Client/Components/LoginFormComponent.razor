@using Microsoft.AspNetCore.Components
@using Quanda.Client.Repositories.Interfaces
@using Quanda.Shared.DTOs.Requests
@using Quanda.Shared.Enums
@using Blazored.LocalStorage
@using Quanda.Client.Authentication
@inject IAuthenticationService _authenticationService
@inject NavigationManager _navManager
@inject ILocalStorageService _localStorageService
@inject IToastService _toastService

<EditForm Model="@_loginDto" OnValidSubmit="@HandleValidSubmit" autocomplete="off">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email-input" class="d-block">Email Address</label>
        <InputText id="email-input" @bind-Value="_loginDto.Email" />
        <ValidationMessage For="() => _loginDto.Email" />
    </div>
    <div class="form-group">
        <label for="password-input" class="d-block">Password</label>
        <InputText id="password-input" @bind-Value="_loginDto.RawPassword" />
        <ValidationMessage For="() => _loginDto.RawPassword" />
    </div>

    @if (_loginStatus == LoginStatusEnum.EMAIL_NOT_CONFIRMED)
    {
        <label class="text-danger d-block">Email address is not confirmed.</label>
        <label>Don't see an email?</label><a class="btn btn-link pl-1" href="recover/email-confirmation">Click here</a>
    }

    <CaptchaComponent @ref="_captchaComponent" />

    @if (_isPending)
    {
        <button type="submit" class="btn btn-dark d-block mt-3" disabled>Logging in...</button>
    }
    else
    {
        <button type="submit" class="btn btn-success d-block mt-3">Log In</button>
    }
</EditForm>

@code {
    private readonly LoginDTO _loginDto = new();
    private LoginStatusEnum? _loginStatus;
    private CaptchaComponent _captchaComponent;
    private bool _isPending;

    private async Task HandleValidSubmit()
    {
        var captchaResponseToken = await _captchaComponent.GetCaptchaResponseAsync();
        if (captchaResponseToken is null)
        {
            _toastService.ShowError("reCaptcha must be completed");
            return;
        }
        _loginDto.CaptchaResponseToken = captchaResponseToken;

        _isPending = true;
        StateHasChanged();

        var loginResponseDto = await _authenticationService.LoginAsync(_loginDto);
        _loginStatus = loginResponseDto.LoginStatus;
        await HandleLoginResponse(loginResponseDto.LoginStatus);

        _isPending = false;
    }

    private async Task HandleLoginResponse(LoginStatusEnum loginStatusEnum)
    {
        switch (loginStatusEnum)
        {
            case LoginStatusEnum.LOGIN_ACCEPTED:
                _toastService.ShowSuccess("You have logged in.");
                _navManager.NavigateTo("");
                return;
            case LoginStatusEnum.INVALID_CREDENTIALS:
                _toastService.ShowError("Invalid credentials. Please try again.");
                break;
            case LoginStatusEnum.INVALID_CAPTCHA:
                _toastService.ShowError("reCaptcha must be completed");
                break;
            case LoginStatusEnum.SERVER_ERROR:
                _toastService.ShowError("An unexpected error has occurred. Please try again.");
                break;
        }

        await _captchaComponent.ResetCaptchaAsync();
    }
}
