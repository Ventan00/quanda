@using Quanda.Client.Authentication
@using Quanda.Shared.Enums
@using Blazored.LocalStorage
@inject IAuthenticationService _authenticationService
@inject NavigationManager _navManager
@inject ILocalStorageService _localStorageService
@inject IToastService _toastService

<GenericFormComponent @ref="@_form" Model="@_loginDto" OnValidSubmit="@LoginAsync" IsAutoCompleteOn="false" RequireCaptcha="true">
    <FormInputComponent Type="text" @bind-Value="@_loginDto.NicknameOrEmail" Placeholder="Login or e-mail"/>
    <FormInputComponent Type="password" @bind-Value="@_loginDto.RawPassword" Placeholder="Password"/>
    <FormSubmitComponent SubmitText="Log In" PendingSubmitText="Logging in..." IsPending="@_isPending"/>
    <NavLink href="recover/password">
        <span class="forgot-password-link">
            Forgot password?
        </span>
    </NavLink>
</GenericFormComponent>


@code {

    /// <summary>
    ///     Model formularza
    /// </summary>
    private readonly LoginDTO _loginDto = new();

    /// <summary>
    ///     Referencja do formularza logowania
    /// </summary>
    private GenericFormComponent<LoginDTO> _form;

    /// <summary>
    ///     Zmienna mowiąca o tym, czy formularz jest w trakcie przetwarzania
    /// </summary>
    private bool _isPending;

    /// <summary>
    ///     Metoda wywoływana przy potwierdzeniu prawidłowo wypełnionego formularza logowania
    /// </summary>
    /// <returns></returns>
    private async Task LoginAsync()
    {
        _isPending = true;
        _loginDto.CaptchaResponseToken = await _form.CaptchaComponent.GetCaptchaResponseAsync();

        var loginResponseDto = await _authenticationService.LoginAsync(_loginDto);
        await HandleLoginResponse(loginResponseDto);

        _isPending = false;
    }

    /// <summary>
    ///     Metoda obsługująca odpowiedz od serwera na wysłany formularz
    /// </summary>
    /// <param name="loginResponseDto"></param>
    /// <returns></returns>
    private async Task HandleLoginResponse(LoginResponseDTO loginResponseDto)
    {
        switch (loginResponseDto.LoginStatus)
        {
            case LoginStatusEnum.LOGIN_ACCEPTED:
                _toastService.ShowSuccess("You have logged in.");
                await _localStorageService.SetItemAsync("avatar", loginResponseDto.Avatar);
                _navManager.NavigateTo("");
                return;
            case LoginStatusEnum.INVALID_CREDENTIALS:
                _toastService.ShowError("Invalid credentials. Please try again.");
                break;
            case LoginStatusEnum.INVALID_CAPTCHA:
                _toastService.ShowError("reCaptcha is invalid. Please try again.");
                break;
            case LoginStatusEnum.EMAIL_NOT_CONFIRMED:
                _toastService.ShowError("Email is not confirmed");
                break;
            case LoginStatusEnum.SERVER_ERROR:
                _toastService.ShowError("An unexpected error has occurred. Please try again.");
                break;
        }

        await _form.CaptchaComponent.ResetCaptchaAsync();
    }

}