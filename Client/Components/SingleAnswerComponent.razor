@inject IAnswerRepository answerRepository
@inject IJSRuntime js
@inject NavigationManager navigationManager

<div class="header-info">
    <span class="publish-date">
        @Answer.PublishDate.ToShortDateString()
    </span>
    <span class="gray">
        answered by
    </span>
    <div>
        <a href="/users/@Answer.User.IdUser">
            <img class="user-avatar" src="@Answer.User.Avatar" alt="Avatar" />
        </a> 
    </div>
    <div class="user-column">
        <span class="user-nickname gray">
            @Answer.User.Nickname
        </span>
        <span class="gray">
            @Answer.User.Points points
        </span>
    </div>
</div>
<div class="grid-container">
    @if (ActiveUser == null)
    {
        <div class="row-line rating-color"></div>
        <div class="row-unloggedUser">
            <UnloggedUserComponent></UnloggedUserComponent>
        </div>
    }
    <div class="row-answer">
        <span class="text @(ActiveUser==null?"blur":"") white">
            @Answer.Text
        </span>
        <div class="footer @(ActiveUser==null?"blur":"")">
            <button class="quanda-icon icon-arrowup rating-color @(Answer.IsLiked==1?"liked-answer":"")" @onclick="@(async() => await IncreaseRating())" disabled="@(isNonInteractive || OwnerOfAnswer || Answer.IsLiked == 1)" />
            <span class="answer-rating-text rating-color">
                @Answer.Rating
            </span>
            <button class="quanda-icon icon-arrowdown rating-color @(Answer.IsLiked==-1?"liked-answer":"")" @onclick="@(async() => await DecreaseRating())" disabled="@(isNonInteractive || OwnerOfAnswer || Answer.IsLiked == -1)" />
            @if (Answer.IdRootAnswer == null)
            {
                <span class="black-action" @onclick="@(async () =>await SetReplayActive())">
                    replay
                </span>
            }
            @if (OwnerOfAnswer)
            {
                <div class="black-action" @onclick="@(async () =>await EditAnswer())">
                    <button class="quanda-icon icon-edit white" />
                    <span>
                        edit
                    </span>
                </div>
                <div class="red-action" @onclick="@(()=> DeleteAnswer.InvokeAsync(Answer))">
                    <button class="quanda-icon icon-delete red" />
                    <div>
                        delete
                    </div>
                </div>
            }
            else
            {
                <div class="red-action" @onclick="@(async () =>await ReportAnswer())">
                    <button class="quanda-icon icon-report red" />
                    <div>
                        Report answer
                    </div>
                </div>
            }
        </div>

        @if (IsReplayActive)
        {
            <div class="replay-component">
                <input />
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public AnswerResponseDTO Answer { get; set; }
    /// <summary>
    /// EventCallback odpowiedzialny za aktualizacje listy odpowiedzi.
    /// </summary>
    [Parameter]
    public EventCallback<AnswerResponseDTO> DeleteAnswer { get; set; }
    /// <summary>
    /// Id użytkownika aktywnie przeglądającego pytania użytkownika.
    /// </summary>
    [Parameter]
    public int? ActiveUser { get; set; }
    /// <summary>
    /// Property informująca czy właścicielem odpowiedzi jest aktualnie przeglądajacy użytkownik.
    /// </summary>
    public bool OwnerOfAnswer { get; set; }
    /// <summary>
    /// Property uniemożliwiające zmiany oceny odpowiedzi przez ich właścicieli lub w trakcie przetwarzania zapytania.
    /// </summary>
    public bool isNonInteractive { get; set; }
    /// <summary>
    /// Property informujące czy tryb odpowiadania do odpowiedzi jest widoczny
    /// </summary>
    public bool IsReplayActive { get; set; }

    /// <summary>
    /// Pobiera Id aktywnie przeglądającego pytanie z odpowiedziami. Ustawia zmienną na wartość 'true' w celu zablokowania funkcjonalności edycji i usuwania odpowiedzi.
    /// </summary>
    protected override void OnInitialized()
    {
        if (ActiveUser == Answer.User.IdUser)
        {
            OwnerOfAnswer = true;
            isNonInteractive = true;
        }
    }
    /// <summary>
    /// Metoda aktulizająca ocenę odpowiedzi o 1 w górę.
    /// </summary>
    /// <returns></returns>
    private async Task IncreaseRating()
    {
        isNonInteractive = true;
        var result = await answerRepository.UpdateRatingAnswerAsync(Answer.IdAnswer, Answer.IsLiked + 1);
        if (result.Item1)
        {
            Answer.IsLiked += 1;
            Answer.Rating += 1;
        }
        isNonInteractive = false;
    }
    /// <summary>
    /// Metoda aktulizająca ocenę odpowiedzi o 1 w dół.
    /// </summary>
    /// <returns></returns>
    private async Task DecreaseRating()
    {
        isNonInteractive = true;
        var result = await answerRepository.UpdateRatingAnswerAsync(Answer.IdAnswer, Answer.IsLiked - 1);
        if (result.Item1)
        {
            Answer.IsLiked -= 1;
            Answer.Rating -= 1;
        }
        isNonInteractive = false;
    }

    /// <summary>
    /// Metoda przenosi do strony edycji odpowiedzi.
    /// </summary>
    private async Task EditAnswer()
    {
        navigationManager.NavigateTo($"/answers/{Answer.IdAnswer}/edit");
    }

    /// <summary>
    /// Metoda odpowiedzialna za zmianę trybu odpowiedzialnego za wyświetlania komponentu do utworzenia tekstu odpowiedzi do odpowiedzi.
    /// </summary>
    private async Task SetReplayActive()
    {
        IsReplayActive = !IsReplayActive;
    }

    /// <summary>
    /// Metoda odpowiedzialna za zgłoszenie odpowiedzi.
    /// </summary>
    /// <returns></returns>
    private async Task ReportAnswer()
    {

    }
}