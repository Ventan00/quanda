@inject IAnswerRepository answerRepository
@inject IJSRuntime js
<div class="answer row">
    <div class="answer-rating column">
        <div>
            @if (Answer.Mark == 1)
            {
                <button class="triangle-up" style="color:orange" disabled="disabled" />
            }
            else
            {
                <button class="triangle-up" @onclick="@(async() => await IncreaseRating())" disabled="@DisableButton" />
            }
        </div>
        <div class="rating-text">
            @Answer.Rating
        </div>
        <div>
            @if (Answer.Mark == -1)
            {
                <button class="triangle-down" style="color:orange" disabled="disabled"/>
            }
            else
            {
                <button class="triangle-down" @onclick="@(async() => await DecreaseRating())" disabled="@DisableButton" />
            }
        </div>
    </div>
    @if (EditMode)
    {
        <AnswerTextComponent Text="@Answer.Text" SetEditMode="SetEditMode" SetText="UpdateAnswer"></AnswerTextComponent>
    }
    else
    {
        if (Answer.IdAnswer == ActiveResponse)
        {
            <div class="answer-text" style="background-color:yellow">
                @Answer.Text
            </div> 
        }
        else
        {
            <div class="answer-text">
                @Answer.Text
            </div>
        }

        <div class="edit-option-text">
            @if (Answer.UserResponseDTO.IdUser == 25)
            {

                <div>
                    <button @onclick="@SetEditMode">E</button>
                </div>
                <div>
                    <button @onclick="@(async () =>await DeleteAnswer())">X</button>
                </div>

            }
            <div>
                <button @onclick="@(() => OnSetReplyAnswer.InvokeAsync(Answer.IdAnswer))">R</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public AnswerResponseDTO Answer { get; set; }
    [Parameter]
    public EventCallback ReloadAnswers { get; set; }
    [Parameter]
    public EventCallback<int> OnSetReplyAnswer { get; set; }
    [Parameter]
    public int ActiveResponse { get; set; }
    public bool DisableButton { get; set; }
    public bool EditMode { get; set; }

    private async Task IncreaseRating()
    {
        DisableButton = true;
        var result = await answerRepository.UpdateRatingAnswerAsync(Answer.IdAnswer, Answer.Mark + 1);
        if (result.Item1)
        {
            Answer.Mark += 1;
            Answer.Rating += 1;
        }
        else
        {
            await js.InvokeVoidAsync("alert", result.Item2);
        }
        DisableButton = false;
    }

    private async Task DecreaseRating()
    {
        DisableButton = true;
        var result = await answerRepository.UpdateRatingAnswerAsync(Answer.IdAnswer, Answer.Mark - 1);
        if (result.Item1)
        {
            Answer.Mark -= 1;
            Answer.Rating -= 1;
        }
        else
        {
            await js.InvokeVoidAsync("alert", result.Item2);
        }
        DisableButton = false;
    }

    private async Task DeleteAnswer()
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Do want to delete answer?");
        if (confirmed)
        {
            var result = await answerRepository.DeleteAnswer(Answer.IdAnswer);
            await ReloadAnswers.InvokeAsync();
            if (!result.Item1)
            {
                await js.InvokeVoidAsync("alert", result.Item2);
            }
        }

    }

    private void SetEditMode()
    {
        EditMode = !EditMode;
    }

    private async Task UpdateAnswer(String text)
    {
        var tmpText = Answer.Text;
        Answer.Text = text;
        var result = await answerRepository.UpdateAnswer(Answer.IdAnswer, text);

        if (!result.Item1)
        {
            Answer.Text = tmpText;
            await js.InvokeVoidAsync("alert", result.Item2);
        }
        EditMode = !EditMode;
    }
}
