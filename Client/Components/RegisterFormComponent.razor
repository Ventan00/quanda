@using Quanda.Shared.Enums
@inject IUsersRepository _usersRepository
@inject IToastService _toastService
@inject NavigationManager _navManager

<GenericFormComponent @ref="@_form" Model="@_registerDto" OnValidSubmit="@RegisterAsync" IsAutoCompleteOn="false" RequireCaptcha="true">
    <FormInputComponent Type="text" @bind-Value="@_registerDto.Nickname" Placeholder="Login" />
    <FormInputComponent Type="text" @bind-Value="@_registerDto.Email" Placeholder="Email" />
    <FormInputComponent Type="password" @bind-Value="@_registerDto.RawPassword" Placeholder="Password" />
    <FormSubmitComponent SubmitText="Sign up" PendingSubmitText="Singing up..." IsPending="@_isPending" />
</GenericFormComponent>

@code {

    /// <summary>
    ///     Model formularza
    /// </summary>
    private RegisterDTO _registerDto = new();

    /// <summary>
    ///     Referencja do formularza rejestracji
    /// </summary>
    private GenericFormComponent<RegisterDTO> _form;

    /// <summary>
    ///     Zmienna mowiąca o tym, czy rządanie jest w trakcie realizacji
    /// </summary>
    private bool _isPending;

    /// <summary>
    ///     Metoda wywoływana przy potwierdzeniu prawidłowo wypełnionego formularza rejestracji
    /// </summary>
    /// <returns></returns>
    private async Task RegisterAsync()
    {
        _isPending = true;
        _registerDto.CaptchaResponseToken = await _form.CaptchaComponent.GetCaptchaResponseAsync();

        var registerStatus = await _usersRepository.RegisterAsync(_registerDto);
        await HandleRegisterResponse(registerStatus);

        _isPending = false;
    }

    /// <summary>
    ///     Metoda obsługująca odpowiedz od serwera na wysłany formularz
    /// </summary>
    /// <param name="registerStatusEnum"></param>
    /// <returns></returns>
    private async Task HandleRegisterResponse(RegisterStatusEnum registerStatusEnum)
    {
        switch (registerStatusEnum)
        {
            case RegisterStatusEnum.REGISTER_FINISHED:
                _toastService.ShowSuccess("Confirm your email to finish registration", "Register Complete");
                _navManager.NavigateTo("/login");
                return;
            case RegisterStatusEnum.EMAIL_IS_TAKEN:
                _toastService.ShowError("Email address has already been taken.");
                break;
            case RegisterStatusEnum.NICKNAME_IS_TAKEN:
                _toastService.ShowError("Nickname has already been taken.");
                break;
            case RegisterStatusEnum.INVALID_CAPTCHA:
                _toastService.ShowError("reCaptcha must be completed");
                break;
            case RegisterStatusEnum.SERVER_ERROR:
                _toastService.ShowError("An unexpected error has occurred. Please try again.");
                break;
        }

        await _form.CaptchaComponent.ResetCaptchaAsync();
    }

}