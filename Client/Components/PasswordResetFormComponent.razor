@using Quanda.Shared.DTOs.Requests

<EditForm Model="@_passwordResetDto" OnValidSubmit="() => HandleValidSubmit.InvokeAsync(_passwordResetDto)">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email-input" class="d-block">New Password</label>
        <InputText id="email-input" @bind-Value="_passwordResetDto.RawPassword" />
        <ValidationMessage For="() => _passwordResetDto.RawPassword" />
    </div>

    @if (IsPending)
    {
        <button type="submit" class="btn btn-dark d-block" disabled>Sending ...</button>
    }
    else
    {
        <button type="submit" class="btn btn-success d-block">Change Password</button>
    }
</EditForm>

@code {
    private readonly PasswordResetDTO _passwordResetDto = new();

    [Parameter]
    public EventCallback<PasswordResetDTO> HandleValidSubmit { get; set; }

    [Parameter]
    public string UrlEncodedRecoveryJwt { get; set; }

    [Parameter]
    public int IdUser { get; set; }

    [Parameter]
    public bool IsPending { get; set; }

    protected override void OnInitialized()
    {
        _passwordResetDto.IdUser = IdUser;
        _passwordResetDto.UrlEncodedRecoveryJwt = UrlEncodedRecoveryJwt;
    }

}
