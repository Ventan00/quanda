@using Quanda.Shared.DTOs.Requests
@using System.Net
@inject IUsersRepository _usersRepository
@inject NavigationManager _navManager
@inject IToastService _toastService

<EditForm Model="@_passwordResetDto" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email-input" class="d-block">New Password</label>
        <InputText id="email-input" @bind-Value="_passwordResetDto.RawPassword" />
        <ValidationMessage For="() => _passwordResetDto.RawPassword" />
    </div>

    <CaptchaComponent @ref="_captchaComponent" />

    @if (_isPending)
    {
        <button type="submit" class="btn btn-dark d-block mt-3" disabled>Sending ...</button>
    }
    else
    {
        <button type="submit" class="btn btn-success d-block mt-3">Change Password</button>
    }
</EditForm>

@code {
    /// <summary>
    /// Model formularza
    /// </summary>
    private PasswordResetDTO _passwordResetDto;

    /// <summary>
    /// Zmienna mowiąca o tym, czy rządanie formularza jest w trakcie realizacji
    /// </summary>
    private bool _isPending;

    /// <summary>
    /// Komponent captcha
    /// </summary>
    private CaptchaComponent _captchaComponent;

    /// <summary>
    /// Zakodowany token JWT pobrany z parametrów GET rządania strony rodzica
    /// </summary>
    [Parameter]
    public string UrlEncodedRecoveryJwt { get; set; }

    /// <summary>
    /// Id uzytkownika pobrane z parametrów GET rządania strony rodzica
    /// </summary>
    [Parameter]
    public int IdUser { get; set; }

    /// <summary>
    /// Zainicjalizowanie modelu formularza zmiennymi otrzymanymi od rodzica
    /// </summary>
    protected override void OnInitialized()
    {
        _passwordResetDto = new PasswordResetDTO()
        {
            IdUser = IdUser,
            UrlEncodedRecoveryJwt = UrlEncodedRecoveryJwt
        };
    }

    /// <summary>
    /// Metoda wywoływana przy potwierdzeniu prawidłowo wypełnionego formularza rejestracji
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidSubmit()
    {
        var captchaResponseToken = await _captchaComponent.GetCaptchaResponseAsync();
        if (captchaResponseToken is null)
        {
            _toastService.ShowError("reCaptcha must be completed.");
            return;
        }
        _passwordResetDto.CaptchaResponseToken = captchaResponseToken;

        _isPending = true;

        var responseStatusCode = await _usersRepository.ResetPasswordAsync(_passwordResetDto);
        await HandleResponse(responseStatusCode);

        _isPending = false;
    }

    /// <summary>
    /// Metoda obsługująca odpowiedz od serwera na wysłany formularz
    /// </summary>
    /// <param name="responseStatusCode"></param>
    /// <returns></returns>
    private async Task HandleResponse(HttpStatusCode responseStatusCode)
    {
        switch (responseStatusCode)
        {
            case HttpStatusCode.NoContent:
                _toastService.ShowSuccess("Your password has been changed.");
                _navManager.NavigateTo("/login");
                return;
            case HttpStatusCode.Unauthorized:
                _toastService.ShowError("reCaptcha must be completed.");
                break;
            case HttpStatusCode.Forbidden:
                _toastService.ShowError("Something is wrong. Please recover your password again.");
                _navManager.NavigateTo("/recover/password");
                return;
        }

        await _captchaComponent.ResetCaptchaAsync();
    }
}
