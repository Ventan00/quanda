@using Quanda.Shared.Enums
@inject IQuestionsReposiotry _questionsReposiotry
@inject ITagsRepository _tagsReposiotry
<div class="questions-page">
    <div class="questions">
        <h1>Questions</h1>
        <h6 class="notbold">Questions amount: @questionAmount</h6>
        <div class="sorting-buttons-containter">
            <span class="soring-label">Sorting by:</span>
            <div class="sorting-button  @(activeSorting == SortOptionEnum.Date ? "sorting-active": "")" @onclick="() => SetSorting(SortOptionEnum.Date)">Publish date</div>
            <div class="sorting-button  @(activeSorting == SortOptionEnum.Views ? "sorting-active": "")" @onclick="() => SetSorting(SortOptionEnum.Views)">Views</div>
            <div class="sorting-button  @(activeSorting == SortOptionEnum.Answers ? "sorting-active": "")" @onclick="() => SetSorting(SortOptionEnum.Answers)">Answers</div>
        </div>
        <!--<TagSearchComponent TagSeleted="TagSelected" TagDeselected="TagDeselected"/>-->
        @if (isPending)
        {
            <LoadingIndicatorComponent/>          }
        else
        {
            @if (standardQuestions != null)
            {
                @foreach (var question in standardQuestions)
                {
                    <QuestionInListComponent question="question" />
                }
                @if (questionAmount > Config.QUESTIONS_PAGINATION_TAKE_SKIP)
                {
                    <div class="d-flex flex-row-reverse">
                        <PaginationComponent ActualPage="activePage" ElementsSize="questionAmount" PageSelectedListener="ChangeActivePage" PageSize="Config.QUESTIONS_PAGINATION_TAKE_SKIP" />
                    </div>
                }
            }
            else
            {
                <div class="no-questions w-100 d-flex justify-content-center">
                    There are no questions with selected tags. (Faktczny element będzie, kiedy powstanie projekt)
                </div>
            }
            @if (extraQuestions != null && extraQuestions.Count != 0)
            {
                <h2>You might also like</h2>
                @foreach (var question in extraQuestions)
                {
                    <QuestionInListComponent question="question" />
                }
            }
        }
    </div>
    <div class="right-menu">
        <!--<RightMenuComponent Version="RightMenuEnum.Standard"/>-->
    </div>
</div>
@code {
    /// <summary>
    ///     Zmienna która mówi czy pytania są ładowane z bazy danych
    /// </summary>
    bool isPending = true;
    /// <summary>
    ///     Zmienna opisująca ile jest pytań po zostasowaniu metod filtrowania
    /// </summary>
    private int questionAmount;

    /// <summary>
    ///     Aktualna opcja sortowania:
    /// </summary>
    private SortOptionEnum activeSorting;

    /// <summary>
    ///     Numer aktualnie przeglądanej strony
    /// </summary>
    public int activePage;

    /// <summary>
    ///     Lista standardowych pytań na danej stronie posortowana według wybranej opcji opisanej po przez zmienną activeSorting
    /// </summary>
    public List<QuestionGetQuestionsDTO> standardQuestions { get; set; }

    /// <summary>
    ///     Lista dodatkowych pytań na danej stronie posortowana według wybranej opcji opisanej po przez zmienną activeSorting 
    /// </summary>
    public List<QuestionGetQuestionsDTO> extraQuestions { get; set; }

    /// <summary>
    ///     Lista wybranych id tagów
    /// </summary>
    public List<int> selectedTags = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        //selectedTags.Add(4); //mock, uncomment for testing
        //selectedTags.Add(2); //mock, uncomment for testing
        await GetQuestions();
    }

    /// <summary>
    ///     Funkcja która pobiera z BD listę pytań uwzględniając aktualną stronę, wybrane sortowanie oraz wybrane kategorie
    /// </summary>
    /// <returns></returns>
    private async Task GetQuestions()
    {
        var returnedQuestions = await _questionsReposiotry.GetQuestions(activePage, activeSorting, selectedTags);
        standardQuestions = returnedQuestions.StandardQuestions;
        extraQuestions = returnedQuestions.ExtraQuestions;
        questionAmount = returnedQuestions.QuestionsCount;
        isPending = false;
        StateHasChanged();
    }

    /// <summary>
    ///     Funkcja która zmienia aktualny tryb sortowania
    /// </summary>
    /// <param name="sortingOption">
    ///     Opisuje tryb sortowania
    /// </param>
    /// <returns></returns>
    private async Task SetSorting(SortOptionEnum sortingOption)
    {
        activeSorting = sortingOption;
        isPending = true;
        StateHasChanged();
        await GetQuestions();
    }

    /// <summary>
    ///     Funkcja dodaje Id tagu do listy wybranych tagów
    /// </summary>
    /// <param name="tagId">Id wybranego tagu</param>
    /// <returns></returns>
    private async Task TagSelected(int tagId)
    {
        activePage = 0;
        selectedTags.Add(tagId);
        isPending = true;
        StateHasChanged();
        await GetQuestions();
    }

    /// <summary>
    ///     Funkcja usuwa Id tagu listy wybranych tagów
    /// </summary>
    /// <param name="tagId">Id wybranego tagu</param>
    /// <returns></returns>
    private async Task TagDeselected(int tagId)
    {
        activePage = 0;
        selectedTags.Remove(tagId);
        isPending = true;
        StateHasChanged();
        await GetQuestions();
    }

    /// <summary>
    ///     Funkcja która zmienia aktualnie wyświetlaną stronę
    /// </summary>
    /// <param name="pageNumber">Numer wyświetlanej strony</param>
    /// <returns></returns>
    private async Task ChangeActivePage(int pageNumber)
    {
        activePage = pageNumber;
        isPending = true;
        StateHasChanged();
        await GetQuestions();
    }

}